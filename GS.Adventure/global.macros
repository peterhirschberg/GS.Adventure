;
;  global.macros
;  GS.Adventure
;
;  Created by Peter Hirschberg on 7/02/21.
;Copyright © 2021 Peter Hirschberg. All rights reserved.
;



        macro
        spriteGetDrawAddress
        lda >rectY
        asl a
        tax
        lda >screenRowOffsets,x
        sta >drawAddress
        lda >rectX
        lsr a
        clc
        adc >drawAddress
        clc
        adc #$2000
        sec
        sbc #20
        sta >drawAddress
        mend


        macro
        eraseBackgroundWord
        sta >BACKGROUND_ADDR,x
        inx
        inx
        mend


        macro
        blitBackgroundWord
        lda >BACKGROUND_ADDR,x
        sta >SCREEN_ADDR,x
        inx
        inx
        mend


        macro
        drawSurroundWord
        lda >BACKGROUND_ADDR,x
        cmp #COLOR_LTGRAY
        bne dontDrawSurround_&SYSCNT
        tya
        sta >SCREEN_ADDR,x
dontDrawSurround_&SYSCNT anop
        inx
        inx
        mend


        macro
        drawSurroundWordLast
        lda >BACKGROUND_ADDR,x
        cmp #COLOR_LTGRAY
        bne dontDrawSurround_&SYSCNT
        tya
        sta >SCREEN_ADDR,x
dontDrawSurround_&SYSCNT anop
        mend


        macro
        drawSurroundWordBackwards
        lda >BACKGROUND_ADDR,x
        cmp #COLOR_LTGRAY
        bne dontDrawSurround_&SYSCNT
        tya
        sta >SCREEN_ADDR,x
dontDrawSurround_&SYSCNT anop
        dex
        dex
        mend


        macro
        drawSurroundWordBackwardsLast
        lda >BACKGROUND_ADDR,x
        cmp #COLOR_LTGRAY
        bne dontDrawSurround_&SYSCNT
        tya
        sta >SCREEN_ADDR,x
dontDrawSurround_&SYSCNT anop
        mend



        macro
        eraseSurroundWord
        lda >BACKGROUND_ADDR,x
        sta >SCREEN_ADDR,x
        inx
        inx
        mend


        macro
        eraseSurroundWordLast
        lda >BACKGROUND_ADDR,x
        sta >SCREEN_ADDR,x
        mend


        macro
        eraseSurroundWordBackwards
        lda >BACKGROUND_ADDR,x
        sta >SCREEN_ADDR,x
        dex
        dex
        mend


        macro
        eraseSurroundWordBackwardsLast
        lda >BACKGROUND_ADDR,x
        sta >SCREEN_ADDR,x
        mend



        macro
        nextSurroundRow
        txa
        clc
        adc #160
        tax
        mend


        macro
        writeScreenWord
        sta >SCREEN_ADDR,x
        inx
        inx
        mend



        macro
        setSurroundGridValue
        lda >SURROUND_GRID_ADDR,x
        cmp #0
        beq surroundDraw_&SYSCNT
        cmp #SURROUND_ERASE
        beq surroundDraw_&SYSCNT
        cmp #SURROUND_DRAW
        beq surroundLeave_&SYSCNT
        bra surroundDone_&SYSCNT
surroundDraw_&SYSCNT anop
        lda #SURROUND_DRAW
        sta >SURROUND_GRID_ADDR,x
        bra surroundDone_&SYSCNT
surroundLeave_&SYSCNT anop
        lda #SURROUND_LEAVE
        sta >SURROUND_GRID_ADDR,x
surroundDone_&SYSCNT anop
        mend



        macro
        unsetSurroundGridValue
        lda #SURROUND_ERASE
        sta >SURROUND_GRID_ADDR,x
        mend


        macro
        pixelToSurroundGrid
        lsr a
        lsr a
        lsr a
        lsr a
        mend


        macro
        surroundGridToPixel
        asl a
        asl a
        asl a
        asl a
        mend


;
; ********************************************
; Code pulled from Jeremy Rand's "BuGS" game
; Github: https://github.com/jeremysrand/BuGS
; ********************************************
;
;  Created by Jeremy Rand on 2020-12-16.
;Copyright © 2020 Jeremy Rand. All rights reserved.
;

        macro
        _spriteHeader
        sei                     ; 2
        tsc                     ; 2
        sta >backupStack        ; 5
        lda >STATE_REGISTER     ; 6 - Direct Page and Stack in Bank 01/
        ora #$0030              ; 3
        sta >STATE_REGISTER     ; 6
        clc                     ; 2
        tya                     ; 2
        tcs                     ; 2
        mend                    ; 30


        macro
        _spriteFooter
        lda #0
        tcd
        lda >STATE_REGISTER     ; 6
        and #$ffcf              ; 3
        sta >STATE_REGISTER     ; 6
        lda >backupStack        ; 5
        tcs                     ; 2
        cli                     ; 2
        mend                    ; 24


; Thanks to Lucas Scharenbroich for this code -----------------------

; Read Bank 00 / Write Bank 01
        macro
        setR0W1
        short m
        lda >$00C068
        and #$DF
        ora #$10
        sta >$00C068
        long m
        mend

; Read Bank 01 / Write Bank 01
        macro
        setR1W1
        short m
        lda >$00C068
        ora #$30
        sta >$00C068
        long m
        mend

; Read Bank 00 / Write Bank 00 (Normal state)
        macro
        setR0W0
        short m
        lda >$00C068
        and #$CF
        sta >$00C068
        long m
        mend


; ORCA/M macros


	macro
&l	long	&a,&b
	lclb	&i
	lclb	&m
&a	amid	&a,1,1
&m	setb	("&a"="M").or.("&a"="m")
&i	setb	("&a"="I").or.("&a"="i")
	aif	c:&b=0,.a
&b	amid	&b,1,1
&m	setb	("&b"="M").or.("&b"="m").or.&m
&i	setb	("&b"="I").or.("&b"="i").or.&i
.a
&l	rep	#&m*32+&i*16
	aif	.not.&m,.b
	longa on
.b
	aif	.not.&i,.c
	longi on
.c
	mend



	macro
&l	short &a,&b
	lclb	&i
	lclb	&m
&a	amid	&a,1,1
&m	setb	("&a"="M").or.("&a"="m")
&i	setb	("&a"="I").or.("&a"="i")
	aif	c:&b=0,.a
&b	amid	&b,1,1
&m	setb	("&b"="M").or.("&b"="m").or.&m
&i	setb	("&b"="I").or.("&b"="i").or.&i
.a
&l	sep	#&m*32+&i*16
	aif	.not.&m,.b
	longa off
.b
	aif	.not.&i,.c
	longi off
.c
	mend
